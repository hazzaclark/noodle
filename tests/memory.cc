// COPYRIGHT (C) HARRY CLARK 2025
// A LIGHTWEIGHT IMPLEMENTATION OF COMMON UTILITIES 

// THIS FILE PERTAINS TOWARDS THE MODULARISATION OF A FULL FLEDGED MEMORY MAPPER UTILITY

// NESTED INCLUDES

#include <noodle/memory.hh>

using namespace fujiko::memory;

// SIMPLE CONSTRUCTOR FOR MEMORY ALLOCATION
// ALWAYS PRESUPPOSE THAT NOTHING IS DONE SO WE RESET
MEMORY::MEMORY()
{
    RESET(true);
}

// PROPER MEMORY RESET BASED ON RESET PIN OF THE SATURN
// OTHER COMPONENTS SUCH AS SCU AND VDP ARE WITHSTANDING FOR THIS
void MEMORY::RESET(bool MODE)
{
    if(MODE)
    {
        std::fill(MEMORY_ARRAY.begin(), MEMORY_ARRAY.end(), 0x00);
        fmt::print("MEMORY RESET WITH ADDRESS: {:p}\n", static_cast<void*>(MEMORY_ARRAY.data()));
    }
}

// THIS WILL ACT AS THE ALL ENCOMPASSING MEANS BY WHICH WE DEFINE
// THE MEMORY MAPPER FOR THE WHOLE SYSTEM
void MEMORY::MAP_MEMORY(MEMORY_BUS& BUS)
{
    BUS.MAP_ARRAY(0x0000000, 0x00080000, MEMORY_ARRAY, true);
}

int main(void)
{
    fmt::print("NOODLE - MEMORY BUS TEST\n");
    MEMORY MEM;
    MEMORY_BUS BUS;

    MEM.MAP_MEMORY(BUS);
    
    return 0;
}
